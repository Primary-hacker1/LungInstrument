apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        versionCode globalConfiguration["androidVersionCode"]
        versionName globalConfiguration["androidVersionName"]
        ndkVersion globalConfiguration["androidNdkVersion"]

        multiDexEnabled globalConfiguration["androidMultiDexEnabled"]
        testInstrumentationRunner globalConfiguration["testInstrumentationRunner"]

    }

    buildTypes {
        release {
            minifyEnabled false
            LogDebug = false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            LogDebug = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kapt {
        generateStubs = true
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    signingConfigs {
        release {
            storeFile file('lunginstruments.jks')
            storePassword "123456"
            keyAlias "zxj"
            keyPassword "123456"
        }
    }

    applicationVariants.configureEach {
        variant ->
            variant.outputs.configureEach {
                Calendar calendar = Calendar.getInstance(Locale.CHINA)
                def buildDate = String.format(Locale.CHINA, "%04d%02d%02d",
                        calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH))
                def versionName = defaultConfig.versionName
                if (variant.buildType.name == 'release') {
                    outputFileName = "inspect-${buildDate}-${versionName}r${versionCode}.apk"
                } else {
                    outputFileName = "inspect-${buildDate}_debug.apk"
                }
            }
    }

}

kapt {
    arguments {
        arg("dagger.hilt.shareTestComponents", "true")
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':libview')
    implementation project(path: ':common')
    implementation project(path: ':autosize')
    implementation project(path: ':serialport')
    implementation project(path: ':usbSerialForAndroid')
    implementation project(path: ':MPChartExample')
    implementation project(path: ':MPChartLib')
    implementation project(path: ':charts')//备用折线图
    implementation project(path: ':LuckyEcgChart')

    implementation gradleBase.core
    implementation gradleBase.appcompat
    implementation 'com.google.android.material:material:1.5.0'
//    implementation 'com.google.android.material:material:1.5.0'
    testImplementation gradleBase.junit
    implementation presentationDependencies.constraintlayout

    // navigation
    implementation presentationDependencies.navigation_fragment
    implementation presentationDependencies.navigation_ui
    implementation presentationDependencies.navigation_fragment_ktx
    implementation presentationDependencies.navigation_ui_ktx

    // room
    kapt presentationDependencies.room_compiler
    implementation presentationDependencies.room_runtime
    implementation presentationDependencies.room_ktx

    // work
    implementation 'androidx.work:work-runtime-ktx:2.7.1'

    // lifecycle
    implementation presentationDependencies.lifecycle_viewmodel_ktx
    implementation presentationDependencies.lifecycle_viewmodel_savedstate

    // Hilt
    kapt presentationDependencies.hilt_compiler
    implementation presentationDependencies.hilt_andorid
    implementation presentationDependencies.hilt_lifecycle_viewmodel

    // datastore
    implementation presentationDependencies.datastore_preferences
    implementation presentationDependencies.datastore_core

    //生成word
    implementation('com.deepoove:poi-tl:1.4.2') {
        //在Android 中 poi-tl 所依赖的库会导致无法编译
        //所以只使用 poi-tl 的填充功能
        //然后使用其他作者提供的 poi
        //下面是过滤掉 poi-tl 的依赖库
        exclude group: 'org.apache.xmlbeans', module: 'xmlbeans'
        exclude group: 'org.apache.poi', module: 'poi-ooxml'
        exclude group: 'org.apache.poi', module: 'poi-ooxml-schemas'
        exclude group: 'org.apache.poi', module: 'poi'
    }
    implementation files('libs/poishadow-all.jar')
    implementation files('libs/aspose-words-android.jar')

    //美灵思心电
    implementation files('libs/mlnxdevicelibrary_v2.7.aar')

    //悬浮框
    implementation presentationDependencies.float_window
}
