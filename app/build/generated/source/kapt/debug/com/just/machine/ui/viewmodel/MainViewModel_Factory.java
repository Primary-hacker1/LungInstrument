// Generated by Dagger (https://dagger.dev).
package com.just.machine.ui.viewmodel;

import com.just.machine.api.UserRepository;
import com.just.machine.dao.PlantRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<UserRepository> repositoryProvider;

  private final Provider<PlantRepository> plantDaoProvider;

  public MainViewModel_Factory(Provider<UserRepository> repositoryProvider,
      Provider<PlantRepository> plantDaoProvider) {
    this.repositoryProvider = repositoryProvider;
    this.plantDaoProvider = plantDaoProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(repositoryProvider.get(), plantDaoProvider.get());
  }

  public static MainViewModel_Factory create(Provider<UserRepository> repositoryProvider,
      Provider<PlantRepository> plantDaoProvider) {
    return new MainViewModel_Factory(repositoryProvider, plantDaoProvider);
  }

  public static MainViewModel newInstance(UserRepository repository, PlantRepository plantDao) {
    return new MainViewModel(repository, plantDao);
  }
}
