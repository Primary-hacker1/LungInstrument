// Generated by Dagger (https://dagger.dev).
package com.just.machine.di;

import com.just.machine.dao.AppDatabase;
import com.just.machine.dao.PlantDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvidePlantDaoFactory implements Factory<PlantDao> {
  private final Provider<AppDatabase> appDatabaseProvider;

  public DatabaseModule_ProvidePlantDaoFactory(Provider<AppDatabase> appDatabaseProvider) {
    this.appDatabaseProvider = appDatabaseProvider;
  }

  @Override
  public PlantDao get() {
    return providePlantDao(appDatabaseProvider.get());
  }

  public static DatabaseModule_ProvidePlantDaoFactory create(
      Provider<AppDatabase> appDatabaseProvider) {
    return new DatabaseModule_ProvidePlantDaoFactory(appDatabaseProvider);
  }

  public static PlantDao providePlantDao(AppDatabase appDatabase) {
    return Preconditions.checkNotNullFromProvides(DatabaseModule.INSTANCE.providePlantDao(appDatabase));
  }
}
